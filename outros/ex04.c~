#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(){

void exUm(){
pid_t idProcesso;	
	printf("Comecando o programa...\n");
	idProcesso = fork();
	switch(idProcesso){
		case -1:
  			printf("Houve erro na execucao");
  			exit(1);
		case 0:
  			printf("Sou o processo pai 1 ID: %d\n", getpid());
				idProcesso = fork();
				switch(idProcesso){
					case -1:
					  printf("Houve erro na execucao");
					  exit(1);
					case 0:
					  printf("Sou o processo filho 1 ID: %d\n", getpid());
					  break;
					default:
					  printf("Sou o processo pai 1 de ID: %d, IDAvo: %d e IDFilho: %d\n", getpid(), getppid(), idProcesso);
					  break;
					  }
  		break;
		default:
			printf("Sou o processo avo de ID: %d, IDAvo: %d e IDFilho 1.: %d\n", getpid(), getppid(), idProcesso);
			idProcesso = fork();
			switch(idProcesso){		
				case -1:
  					printf("Houve erro na execucao");
				 	exit(1);
				case 0:
				 	 printf("Sou o processo pai 2 ID: %d\n", getpid());
						idProcesso = fork();
						switch(idProcesso){
							case -1:
							  printf("Houve erro na execucao");
							  exit(1);
							case 0:
							  printf("Sou o processo filho 2 ID: %d\n", getpid());
							  break;
							default:
							  printf("Sou o processo pai 2 de ID: %d, IDAvo: %d e IDFilho: %d\n", getpid(), getppid(), idProcesso);
							  break;
						}
		break;
		default:
			printf("Sou o processo avo de ID: %d, IDAvo: %d e IDFilho 2: %d\n", getpid(), getppid(), idProcesso);
		break;  
		}
break;
}
}

void exDois(){
int i;
	pid_t idProcesso;
	printf("Comecando o programa...\n");
	idProcesso = fork();
	//system("ps");
	switch(idProcesso){
		case -1:
  			printf("Houve erro na execucao");
  			exit(1);
		case 0:
			for(i = 0; i<8; i++){
	  			printf("Sou o processo filho 1 ID: %d\n", getpid());
					idProcesso = fork();	
				sleep(4);
			}
			//system("ps");
		break;
		default:
			for(i=0; i<10; i++){
				printf("Sou o processo pai de ID: %d, IDFilho: %d\n", getpid(),idProcesso);
				idProcesso = fork();
				sleep(5);
			}
			switch(idProcesso){
				case -1:
					  printf("Houve erro na execucao");
					  exit(1);
				case 0:
					for(i=0; i<6; i++){
						printf("Sou o processo filho 2 ID: %d\n", getpid());
						sleep(3);
					}
					//system("ps");
				break;
				default:
					for(i=0; i<8; i++){
						  printf("Sou o processo pai de ID: %d, IDFilho: %d\n", getpid(), idProcesso);
					sleep(4);
					}
				break;
					  }
		break;

	}
}


void exTres(){

	int idProcesso;
	int retorno;
	int retorno2;
        int i;
	int cont = 0;
	printf("\n AVO \n");
	
	idProcesso = fork();
	
	for(i = 0; i <=60; i++){
		if(i>=14){
		switch(idProcesso){
			case -1:
				printf("Erro na execucao");
			break;
			case 0:
				printf("\n-------Pai1 ID: %d", getpid());
				printf("\n Relatorio do sistema \n");
				system("ps");
				if(i >=26){
				
				idProcesso = fork();
				
				//pai 1 e filho1
				switch(idProcesso){
					case -1:
						printf("Erro na execucao");
					break;
					case 0:
						printf("\n------Neto1 ID: %d", getpid());
						printf("Relatorio do Sistema");
						system("ps");
						if( i >= 38 ){
						kill(getpid(),9);
						printf("\n-------Neto 1 morreu");
						printf("\n Relatorio do sistema");
						system("ps");
						}
					break;
					default:
						printf("\n-------Pai1 ID: %d", getppid());
						printf("\n Relatorio do Sistema");
						system("ps");
						
						if(i > 30){
						
						switch(idProcesso){
							case -1:
								printf("Erro na execucao");
							break;
							case 0:
								printf("\n------Neto2 ID: %d", getpid());
								printf("Relatorio do sistema");
								system("ps");
								if(i >= 48){
								kill(getpid(),9);
								printf("\n-------Neto2 morreu");
								printf("\n Relatorio do Sistema");
								system("ps");
								}
							break;
	
							default:
								printf("\n------Pai1 ID: %d", getppid());
							
							break;
						}
						}
						
					break;
					
				}
				}
			if( i > 49 ){
			kill(getpid(), 9);
			printf("\n--------Morreu Pai 1");
			printf("\n Relatorio do Sistema");
			}
			break;
				//avo e pai2
			default:
				printf("\n------Sou o avo de ID: %d", getppid());
				printf("Relatorio do sistema\n");
				system("ps");
				if(i >= 16){
				idProcesso = fork();
				
					switch(idProcesso){
					case -1:
						printf("Erro na execucao");
					break;
					case 0:
						printf("\n-------Pai2 criado: ID: %d", getpid());
						printf("Relatorio do sistema");
						system("ps");
					
						if(i>=46){
						kill(getpid(),9);
						printf("\n------Morreu o pai 2");
						printf("\n Relatorio do Sistema");
						system("ps");
						}
					break;
					
					default:
						printf("\n-------Avo ID: %d", getppid());
					break;
				}
				}
			if( i > 60 ){
			kill(getpid(), 9);
			printf("\n-----Morreu o avo");
			printf("Relatorio do sistema");
			system("ps");
			}
			break;
		}
		}
		sleep(1);
	}
}



int opc;
        do {
	printf ("Digite um numero: ");
	scanf ("%d",&opc);
	switch(opc){
		case 1:
  			printf("Ex 01\n");
                        exUm();
  		        break;
		case 2:
	         	printf("Ex 02\n");
                        exDois();
		        break;
     		case 3:
	         	printf("Ex 03\n");
                        exTres();
		        break;
                case 0:
                        exit(0);
		default:
	                printf("Opcao invalida\n");
                        break;
           }}while(opc != 0);
}
		


